#!/bin/bash

# Based on the Taskfile format from https://github.com/adriancooney/Taskfile
# Please keep functions sorted alphabetically for ease of future editing.

BASEPYTHON=`which python3.10 || which python3 || which python`
BASE_DIR=$(cd `dirname "$0"`; pwd)
PROJECT_NAME=`basename "$BASE_DIR"`
VERR="Activate your virtualenv first (try ./run bootstrap)."

function bootstrap {
    # Create a default .env file for dev
    [ ! -e "$BASE_DIR/.env" ] && cp $BASE_DIR/example.env $BASE_DIR/.env
    # Make sure there's a var dir for tmp files.
    [ ! -d "$BASE_DIR/var" ] && mkdir -p "$BASE_DIR/var"
    # If we're not already in a virtualenv, try to create one
    [ -n "$VIRTUAL_ENV" ] && PYTHON="$VIRTUAL_ENV/bin/python" || setup_virtualenv
    echo "Using python: $PYTHON"
    echo "Installing pip requirements. May take a while. Grab a coffee."
    pipsync
    $PYTHON $BASE_DIR/manage.py migrate
}

function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | cat -n
}

function migrate {
    [ -n $VIRTUAL_ENV ] && $VIRTUAL_ENV/bin/python $BASE_DIR/manage.py migrate || echo $VERR
}

function server {
    [ -n $VIRTUAL_ENV ] && $VIRTUAL_ENV/bin/python $BASE_DIR/manage.py runserver || echo $VERR
}

function setup_virtualenv() {
    # Creates a virtualenv for this project if one does not exist
    # Set the global PYTHON var to the path to the virtualenv's python

    # If using basic venv/virtualenv, return that
    local venvpy="$BASE_DIR/.venv/bin/python"
    # echo "Return local venvpy if found" >&2
    [ -x "$venvpy" ] && PYTHON="$venvpy" && return 0
    echo "No virtualenv found, creating..." >&2

    UV=`which uv`
    if [ -x "$UV" ]; then
        echo "Using uv to create virtualenv" >&2
        $UV venv --prompt "$PROJECT_NAME" && PYTHON="$venvpy"
        return 0
    fi
    # Create old-school virtualenv
    echo "Using python -m venv" >&2
    $BASEPYTHON -m venv --prompt "$PROJECT_NAME" $BASE_DIR/.venv && PYTHON="$venvpy"
}

function tests {
    tox -e py310-django42 $@
}

function pipsync {
    UV=`which uv`
    [ -z "$UV" ] && echo "This command requires uv, install from https://github.com/astral-sh/uv" && exit 1
    
    export CUSTOM_COMPILE_COMMAND="./run pipsync"
    $UV pip compile -o requirements.txt requirements.in
    $UV pip compile -o requirements-dev.txt requirements-dev.in
    $UV pip sync requirements-dev.txt
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-server}
