"""
Generated by 'django-admin startproject' using Django 5.2b1.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/


See also https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

"""

from importlib.util import find_spec
from pathlib import Path

import commoncontent.apps
import environ

# Rather than use template substitution, we assume the convention that the
# project name is the first part of the settings module name. This allows us
# to keep this file pure Python.
PROJECT = __name__.split(".")[0]
# Build paths inside the project like this: BASE_DIR / 'subdir'. But these
# paths should only be used as defaults in development. In production, you
# should set any paths via environment variables.
BASE_DIR = Path(__file__).resolve().parent.parent
#######################################################################################
# SECTION: Settings that can (and maybe should) differ between environments
#######################################################################################

# Get environment settings.
env = environ.Env()
DOTENV = BASE_DIR / ".env"
if DOTENV.exists() and not env("IGNORE_ENV_FILE", default=False):
    environ.Env.read_env(DOTENV)

# SECRET_KEY intentionally has no default, and will error if not provided
# in the environment. This ensures you don't accidentally run with an
# insecure configuration in production.
SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG", default=False)
# Since the point of this project is to create new sites at run time, Django
# must be able to serve requests for any domain.
ALLOWED_HOSTS = env("ALLOWED_HOSTS", default=["*"])

# If running behind a reverse proxy that terminates SSL for you, you need to set
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# and possibly SECURE_SSL_REDIRECT = True
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-proxy-ssl-header
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-ssl-redirect
SECURE_SSL_REDIRECT = False
if env.bool("USE_TLS", default=False):
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_SSL_REDIRECT = True

# Local data written by the app should be kept in one directory for ease of backup.
# In DEV this can be a subdir of BASE_DIR. In production, for single-server setups
# this should be a directory outside BASE_DIR that is backed up on a regular basis.
# For scalable configurations, you should not use local paths but external services
# like S3 and a dedicated database server.
DATA_DIR = Path(env("DATA_DIR", default=BASE_DIR.joinpath("var")))

# Static files (CSS, JavaScript, Images) and Media files (user uploads)
# https://docs.djangoproject.com/en/dev/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = DATA_DIR / "static"
STATIC_ROOT.mkdir(parents=True, exist_ok=True)
MEDIA_URL = "/media/"
MEDIA_ROOT = DATA_DIR / "media"
MEDIA_ROOT.mkdir(parents=True, exist_ok=True)

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# Javascript / CSS assets being served from cache.
# See https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#manifeststaticfilesstorage
# But for production, you almost certainly should be using a shared storage backend, like:
# https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
STORAGES = {
    "default": {
        "BACKEND": env(
            "DEFAULT_STORAGE", default="django.core.files.storage.FileSystemStorage"
        ),
    },
    "staticfiles": {
        "BACKEND": env(
            "STATICFILES_STORAGE",
            default="django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
        ),
    },
}


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases
# A default path for development, but you should set DATABASE_URL in production.
DB_DIR = DATA_DIR / "db"
SQLITE_DB = DB_DIR / "db.sqlite3"

# These settings will dramatically improve concurrency performance if using
# SQLite. Note, these options only work in Django 5.1+
# https://kerkour.com/sqlite-for-servers
SQLITE_PRAGMAS = """PRAGMA journal_mode = WAL;
PRAGMA busy_timeout = 5000;
PRAGMA synchronous = NORMAL;
PRAGMA cache_size = 1000000000;
PRAGMA foreign_keys = true;
PRAGMA temp_store = memory;"""
SQLITE_OPTIONS = {
    "transaction_mode": "IMMEDIATE",
    "init_command": SQLITE_PRAGMAS,
}

DATABASES = {"default": env.db("DATABASE_URL", default=f"sqlite:///{SQLITE_DB}")}
if DATABASES["default"]["ENGINE"] == "django.db.backends.sqlite3":
    DATABASES["default"]["OPTIONS"] = SQLITE_OPTIONS
    DB_DIR.mkdir(parents=True, exist_ok=True)

CACHES = {"default": env.cache("CACHE_URL", default="locmemcache://")}

# Email settings don't use a dict. Add to local vars instead.
# https://django-environ.readthedocs.io/en/latest/tips.html#email-settings
EMAIL_CONFIG = env.email_url("EMAIL_URL", default="consolemail://")
vars().update(EMAIL_CONFIG)

#######################################################################################
# SECTION: Application definition, settings that should not vary between environments
#######################################################################################
WSGI_APPLICATION = f"{PROJECT}.wsgi.application"
ROOT_URLCONF = f"{PROJECT}.urls"
# Default primary key field type
# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

INSTALLED_APPS = [
    # Add your custom apps at the top so you can override Django's templates:
    "webquills",
    "webquills.sites",
    # Third party apps:
    *commoncontent.apps.CONTENT,  # commoncontent, django_bootstrap_icons, imagekit, taggit
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.mfa",
    # TODO: Add social account providers as needed
    # Optionally use tinymce in the admin
    "tinymce",
    # Core Django apps below custom so we can override their templates
    "django.contrib.admin",
    "django.contrib.admindocs",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.humanize",
    "django.contrib.messages",
    "django.contrib.sitemaps",
    "django.contrib.staticfiles",
    "sitevars",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "webquills.sites.middleware.SitesMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.i18n",
                # These are both required for commoncontent templates to work properly:
                "commoncontent.apps.context_defaults",
                "sitevars.context_processors.inject_sitevars",
            ],
        },
    },
]
if DEBUG:
    # The debug context processor does nothing if DEBUG is False, so we don't
    # include it in that case. In DEBUG, it adds SQL queries to the context.
    TEMPLATES[0]["OPTIONS"]["context_processors"].append(
        "django.template.context_processors.debug"
    )

# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/New_York"
USE_I18N = True
USE_TZ = True

# CELERY settings (only if celery is installed)
if find_spec("celery"):
    # If the environment has not provided settings, assume there is no broker
    # and run celery tasks in-process. This means you MUST provide
    # CELERY_TASK_ALWAYS_EAGER=False in your environment to actually use celery.
    CELERY_TASK_ALWAYS_EAGER = env("CELERY_TASK_ALWAYS_EAGER", default=True)
    CELERY_TASK_EAGER_PROPAGATES = env("CELERY_TASK_EAGER_PROPAGATES", default=True)
    # For development setup, assume default of local redis.
    CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://localhost:6379/1")
    CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", default="")
    CELERY_TIME_ZONE = TIME_ZONE
    if find_spec("django_celery_beat"):
        CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
        INSTALLED_APPS.append("django_celery_beat")

#######################################################################################
# SECTION: AUTHENTICATION SETTINGS
#######################################################################################
# Regarding sessions: Sessions are required for authentication. The cookie backend has
# the advantage of being stateless, but the disadvantage of not being able to
# invalidate sessions, which makes you subject to cookie hijacking and replay attacks.
# Not a good security posture. The database backend is stateful, but writing to the
# database on GET requests is a recipe for DoS attacks. The cache backend is therefore
# the best option, but requires a cache backend that is shared across all servers, and
# ideally persists data (i.e. Redis). We inspect the cache settings, and if a suitable
# cache is configured we use it. Otherwise, we fall back to the database backend.
# https://docs.djangoproject.com/en/dev/topics/http/sessions/
# https://docs.djangoproject.com/en/dev/ref/settings/#session-engine
if "redis" in CACHES["default"]["BACKEND"]:
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
else:
    INSTALLED_APPS.append("django.contrib.sessions")  # Only required for db sessions
    SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = env("SESSION_COOKIE_SECURE", default=SECURE_SSL_REDIRECT)
SESSION_SAVE_EVERY_REQUEST = False

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
LOGIN_REDIRECT_URL = env(
    "LOGIN_REDIRECT_URL",
    default="/accounts/email",
)

# Allauth settings
# https://docs.allauth.org/en/latest/account/configuration.html

# These values are hard-coded for various reasons, usually either security or user
# experience.
ACCOUNT_ADAPTER = "webquills.auth.AccountAdapter"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_UNKNOWN_ACCOUNTS = False
ACCOUNT_LOGOUT_ON_GET = False
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
# TODO: ACCOUNT_SIGNUP_FORM_CLASS
# TODO: ACCOUNT_SIGNUP_REDIRECT_URL
ACCOUNT_UNIQUE_EMAIL = True
# TODO: ACCOUNT_USER_DISPLAY

# These values can be easily overridden in new installations, but have defaults set
# according to best practices.
ACCOUNT_EMAIL_NOTIFICATIONS = env.bool("ACCOUNT_EMAIL_NOTIFICATIONS", default=True)
ACCOUNT_EMAIL_VERIFICATION = env(
    "ACCOUNT_EMAIL_VERIFICATION",
    default="mandatory",
)
assert ACCOUNT_EMAIL_VERIFICATION in [
    "none",
    "optional",
    "mandatory",
], (
    f"ACCOUNT_EMAIL_VERIFICATION must be one of ['none', 'optional', 'mandatory'], not {ACCOUNT_EMAIL_VERIFICATION}"
)
ACCOUNT_EMAIL_SUBJECT_PREFIX = env(
    "ACCOUNT_EMAIL_SUBJECT_PREFIX",
    default="WebQuills: ",
)
ACCOUNT_LOGIN_BY_CODE_ENABLED = env.bool(
    "ACCOUNT_LOGIN_BY_CODE_ENABLED",
    default=True,
)
ACCOUNT_LOGIN_BY_CODE_TIMEOUT = env.int(
    "ACCOUNT_LOGIN_BY_CODE_TIMEOUT",
    default=60 * 5,
)
ACCOUNT_LOGIN_METHODS = env.list(
    "ACCOUNT_LOGIN_METHODS",
    default=["email"],
)
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = env.bool(
    "ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION",
    default=True,
)
ACCOUNT_LOGIN_ON_PASSWORD_RESET = env.bool(
    "ACCOUNT_LOGIN_ON_PASSWORD_RESET",
    default=True,
)
ACCOUNT_LOGOUT_REDIRECT_URL = env(
    "ACCOUNT_LOGOUT_REDIRECT_URL",
    default="/",
)
ACCOUNT_REAUTHENTICATION_REQUIRED = env.bool(
    "ACCOUNT_REAUTHENTICATION_REQUIRED",
    default=False,
)
ACCOUNT_REAUTHENTICATION_TIMEOUT = env.int(
    "ACCOUNT_REAUTHENTICATION_TIMEOUT",
    default=60 * 5,
)
ACCOUNT_SIGNUP_FIELDS = env.list(
    "ACCOUNT_SIGNUP_FIELDS",
    default=[
        "email*",
        "password1*",
        "password2*",
    ],
)
# TODO: Configure MFA

#######################################################################################
# SECTION: LOGGING CONFIGURATION
#######################################################################################
# A logging configuration suitable for production.
LOG_DIR = env("LOG_DIR", default=DATA_DIR / "logs")
LOG_DIR.mkdir(parents=True, exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # Keeps Django's default loggers and handlers
    "formatters": {
        "detailed": {
            "format": "{asctime} [{levelname}] {name}.{module}:{lineno} - {message}",
            "style": r"{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOG_DIR / "django.log",
            "maxBytes": 1024 * 1024 * 1024,  # 1 GB
            "backupCount": 5,
        },
        # A separate log for errors, to be monitored more closely.
        "errorlog": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOG_DIR / "error.log",
            "maxBytes": 1024 * 1024 * 100,  # 100 MB
            "backupCount": 5,
            "formatter": "detailed",
        },
        # Django's console handler logs nothing if DEBUG is False, so we redeclare it.
        # This allows Docker/Kubernetes to capture logs from the console in prod.
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
        },
    },
    "loggers": {
        # Django declares the "django" logger, but sends output only to console.
        "django": {
            "handlers": ["file", "console", "errorlog"],
            "level": "INFO",
            "propagate": False,  # Prevent duplicate logging
        },
        # "django.server" is effectively the access log. Django's default sends
        # it only to console.
        "django.server": {
            "handlers": ["file", "console", "errorlog"],
            "level": "INFO",
            "propagate": False,
        },
        # Log messages from your own project at INFO level.
        PROJECT: {
            "handlers": ["file", "console", "errorlog"],
            "level": "INFO",
            "propagate": False,
        },
        # Third party libraries can be noisy, so only capture warnings/errors.
        "": {
            "handlers": ["file", "console", "errorlog"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}
# A separate config for local development, which includes rich logging.
DEBUG_LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # Keeps Django's default loggers and handlers
    "formatters": {
        "detailed": {
            "format": "{asctime} [{levelname}] {name}.{module}:{lineno} - {message}",
            "style": r"{",
        },
        "rich": {
            "datefmt": "[%X]",
        },
    },
    "handlers": {
        # In dev, log to a file for debugging, rotate daily for a fresh start.
        "file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": LOG_DIR / "django.log",
            "when": "midnight",  # Rotate logs daily at midnight
            "interval": 1,  # Every 1 day
            "backupCount": 7,  # Keep last 7 days of logs
            "encoding": "utf-8",
            "formatter": "detailed",
        },
        # Beautiful and useful console output with rich
        # https://www.willmcgugan.com/blog/tech/post/richer-django-logging/
        "console": {
            "level": "DEBUG",
            "class": "rich.logging.RichHandler",
            "formatter": "rich",
        },
    },
    "loggers": {
        # Django declares the "django" logger, but sends output only to console.
        "django": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,  # Prevent duplicate logging
        },
        # "django.server" is effectively the access log. Django's default sends
        # it only to console.
        "django.server": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        # Log messages from your own project at DEBUG level.
        PROJECT: {
            "handlers": ["file", "console"],
            "level": "DEBUG",
            "propagate": False,
        },
        # Third party libraries can be noisy, adjust accordingly.
        "": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
if DEBUG:
    LOGGING = DEBUG_LOGGING

#######################################################################################
# SECTION: WEBQUILLS SETTINGS
#######################################################################################
# For now we borrow the TinyMCE settings from commoncontent, but we will
# eventually want to override them.
TINYMCE_DEFAULT_CONFIG = commoncontent.apps.TINYMCE_CONFIG
# Let sitesettings know about out custom Sites app.
SITE_MODEL = "sites.Site"
CURRENT_SITE_METHOD = "get_for_request"
# If true, anyone can sign up. If false, you need to create accounts manually.
WEBQUILLS_OPEN_REGISTRATION = env(
    "WEBQUILLS_OPEN_REGISTRATION",
    default=False,
    cast=bool,
)
# These subdomains are expected to be used for other purposes, and should not
# be used for sites.
WEBQUILLS_RESERVED_SUBDOMAINS = env(
    "WEBQUILLS_RESERVED_SUBDOMAINS",
    default=[
        "static",
        "media",
        "assets",
    ],
)
# REQUIRED. The root domain. All sites will be subdomains of this root domain.
WEBQUILLS_ROOT_DOMAIN = env("WEBQUILLS_ROOT_DOMAIN")

#######################################################################################
# SECTION: DEVELOPMENT TOOLS
#######################################################################################
if DEBUG:
    ALLOWED_HOSTS = ["*"]
    # Certain debug features are only available if the client is in INTERNAL_IPS.
    INTERNAL_IPS = ["127.0.0.1"]

    # Install the Django Debug Toolbar if it is available.
    # See also urls.py for debug_toolbar urls
    if find_spec("debug_toolbar"):
        INSTALLED_APPS.append("debug_toolbar")
        MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")

    if find_spec("django_extensions"):
        INSTALLED_APPS.append("django_extensions")
